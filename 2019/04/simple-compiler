<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>AST入门</title>
    <meta name="description" content="">
    
    
    <link rel="preload" href="/share/assets/css/0.styles.18e0c493.css" as="style"><link rel="preload" href="/share/assets/js/app.35e8eb11.js" as="script"><link rel="preload" href="/share/assets/js/2.99d8ca2c.js" as="script"><link rel="preload" href="/share/assets/js/9.abdaf9be.js" as="script"><link rel="preload" href="/share/assets/js/3.0ba4e460.js" as="script"><link rel="prefetch" href="/share/assets/js/10.2655e777.js"><link rel="prefetch" href="/share/assets/js/11.1b5b21ec.js"><link rel="prefetch" href="/share/assets/js/12.4cfc540f.js"><link rel="prefetch" href="/share/assets/js/13.027d3509.js"><link rel="prefetch" href="/share/assets/js/4.7674a282.js"><link rel="prefetch" href="/share/assets/js/5.6b4b3fc2.js"><link rel="prefetch" href="/share/assets/js/6.eae75b47.js"><link rel="prefetch" href="/share/assets/js/7.4062c9e3.js"><link rel="prefetch" href="/share/assets/js/8.7eac1576.js">
    <link rel="stylesheet" href="/share/assets/css/0.styles.18e0c493.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container no-sidebar"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/share/" class="home-link router-link-active"></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <!----></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><!---->  <!----> </aside> <main class="page"> <div class="content default"><h1 id="前言"><a href="#前言" aria-hidden="true" class="header-anchor">#</a> 前言</h1> <p><a href="https://astexplorer.net/">AST Explore，可视化工具</a></p> <p>现如今，许多各式各样的框架诞生，特别是多端生成的解决方案，例如：taro，Chameleon（卡梅隆），小程序框架: mpvue，wepy。
又或者在其他场景，如：</p> <ol><li>eslint对代码错误或风格的检查，发现一些潜在的错误</li> <li>IDE的错误提示、格式化、高亮、自动补全等.</li> <li>UglifyJS压缩代码.</li> <li>代码打包工具webpack。</li></ol> <p>万变不离其宗，都是站在AST这个巨人的肩膀上。
且对于体力型的，或者重复性的工作，能用工具化，流程化解决就用他们解决。</p> <p>在了解编译器之前，了解一下babel的编译过程。<a href="https://yq.aliyun.com/articles/62671">(来源)</a></p> <p><img src="https://user-gold-cdn.xitu.io/2018/12/24/167dfa8949b0401a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="来源"></p> <h2 id="什么是编译器"><a href="#什么是编译器" aria-hidden="true" class="header-anchor">#</a> 什么是编译器</h2> <p>编译器：能够把一种语言等价得转换为另一种目标语言。从现代高级编译器的角度讲，源语言是高级程序设计语言，
容易阅读与编写，而目标语言是机器语言，即二进制代码，能够被计算机直接识别。
语言系统的处理角度来看，由源程序生成可执行程序的整体工作流程如下所示。</p> <p>源程序 -&gt; 预处理器 -&gt; 编译器 -&gt; 目标程序 -&gt; .... -&gt; 可执行程序</p> <p>编译器又分为前端和后端。前端包括词法分析、语法分析、语义分析、中间代码生成，具有机器无关性，比较有代表性的工具是 Flex、Bison。
后端包括中间代码优化、目标代码生成，具有机器相关性，比较有代表性的工具是 LLVM。</p> <p>具体编译原理，查看这篇文章 <a href="https://zhuanlan.zhihu.com/p/31096468">前端为什么要学习编译原理</a></p> <h2 id="编译器的编译过程"><a href="#编译器的编译过程" aria-hidden="true" class="header-anchor">#</a> 编译器的编译过程</h2> <h3 id="_1-词法分析"><a href="#_1-词法分析" aria-hidden="true" class="header-anchor">#</a> 1.词法分析</h3> <p>获取原始代码，称为文法，scan，进行分析，转换为词法单元。token是一个不可再分割的最小单元，每个不可分割的最小单元
都有能被唯一识别的类型和其他附加属性，并通过一个标记器将其拆分为这些命名标记的东西。最终生成一个tokens。
对于token的验证，可以用正则表达式，一个一个进行扫描匹配，指针不断往后移直至不满足匹配规则或达到末尾。
这个过程会过滤换行符和空格等等
例如：</p> <div class="language-vue extra-class"><pre class="language-vue"><code>   const input = '(add 2 (subtract 4 &quot;abc&quot;))'
// 转换为
   const tokens = [ { type: 'paren', value: '(' },
     { type: 'name', value: 'add' },
     { type: 'number', value: '2' },
     { type: 'paren', value: '(' },
     { type: 'name', value: 'subtract' },
     { type: 'number', value: '4' },
     { type: 'number', value: '2' },
     { type: 'paren', value: ')' },
     { type: 'paren', value: ')' } ]
</code></pre></div><h3 id="_2-语法分析"><a href="#_2-语法分析" aria-hidden="true" class="header-anchor">#</a> 2.语法分析</h3> <p>根据token的标记，逐个读入token，使用深度优先遍历并将其重新格式化为描述语法各个部分及其相互关系的表示形式，称为AST。
遇到起始符号，如&quot;&lt;&quot;, &quot;(&quot;, &quot;{&quot; 等，嵌套递归，直到遇到终结符号，退出遍历。
这是一个深度嵌套的对象，以一种即方便使用又能提供大量信息的方式来表示的代码。
例如:</p> <div class="language-vue extra-class"><pre class="language-vue"><code>const ast = {
  type: 'Program',
  body: [{
    type: 'CallExpression',
    name: 'add',
    params: [{
      type: 'NumberLiteral',
      value: '2'
    }, {
      type: 'CallExpression',
      name: 'subtract',
      params: [{
        type: 'NumberLiteral',
        value: '4'
      }, {
        type: 'NumberLiteral',
        value: '2'
      }]
    }]
  }]
}
</code></pre></div><h3 id="_3-语义分析（转换）"><a href="#_3-语义分析（转换）" aria-hidden="true" class="header-anchor">#</a> 3.语义分析（转换）</h3> <p>这个阶段是编译器对上一个AST进行转换，它可以用一种语言操作AST, 也可以翻译成全新的语言。在这个过程中，
我们可以通过 添加/删除/替换属性来操作节点。并基于它创造一个新的AST。例如可以把wx全转为swan等等，或者
在原先的代码基础上添加目标结果的一些特性。
完成上述功能，必须通过递归进行遍历每一层。由于仅仅只需要访问每一个节点就足够了，因此利用visitor就可以解决这个问题。
当遇到匹配类型的节点时，我们只需要调用对应visitor中的方法就可以解决问题。
visitor的方法可能如下：</p> <div class="language-vue extra-class"><pre class="language-vue"><code>var visitor = {
  NumberLiteral(node, parent) {},
  CallExpression(node, parent) {},
  ...
};
</code></pre></div><p>但如果需要在离开当前节点的时候做一些操作呢？
我们可以更新下visitor方法，如下所示:</p> <div class="language-vue extra-class"><pre class="language-vue"><code>const visitor = {
    NumberLiteral: {
      enter(node, parent) {
        parent._context.push({
          type: 'NumberLiteral',
          value: node.value
        })
      },
      exit(node, parent) {
         // do something
      }
    },
    StringLiteral: {
      enter(node, parent) {
        parent._context.push({
          type: 'StringLiteral',
          value: node.value
        })
      }
    },
    ...
  }
</code></pre></div><p>有了visitor对象，就可以在traverseNode（转换节点）的过程中, 对特定的节点进行转换操作，并做一些其他事情。
具体流程如下：</p> <ul><li>→ Program (enter)
<ul><li>→ CallExpression (enter)
<ul><li>→ NumberLiteral (enter)</li> <li>← NumberLiteral (exit)</li> <li>→ CallExpression (enter)
<ul><li>→ NumberLiteral (enter)</li> <li>← NumberLiteral (exit)</li> <li>→ NumberLiteral (enter)</li> <li>← NumberLiteral (exit)</li></ul></li> <li>← CallExpression (exit)</li></ul></li> <li>← CallExpression (exit)</li></ul></li> <li>← Program (exit)</li></ul> <h3 id="_4-代码生成"><a href="#_4-代码生成" aria-hidden="true" class="header-anchor">#</a> 4. 代码生成</h3> <p>代码生成器应当知道如何打印AST的所有不同类型的节点，并且递归调用来打印嵌套节点，直到生成最终代码。</p> <h2 id="制作一个babel插件"><a href="#制作一个babel插件" aria-hidden="true" class="header-anchor">#</a> 制作一个babel插件</h2> <p>由于小程序开发比较多，有接触百度小程序和微信小程序等等，肯定会面临一个转换的问题，如 wx =&gt; swan 等。
这里就尝试做一个类似的插件。</p> <h3 id="_1-创建基础结构（插件的基础）"><a href="#_1-创建基础结构（插件的基础）" aria-hidden="true" class="header-anchor">#</a> 1. 创建基础结构（插件的基础）</h3> <div class="language-vue extra-class"><pre class="language-vue"><code>const babel = require('babel-core');

// 输入的文法
const input = `
function test() {
  wx.showModal({
    title: &quot;modal&quot;,
    content: 'content'
  })
}
`

// 需要做的插件功能
const plugin = ({types: t}) =&gt; {
  return {
    visitor: {
    }
  }
}

// 利用插件
const res = babel.transform(input, {
  plugins: [plugin]
})

console.log(res.code)
</code></pre></div><h3 id="_2-使用https-astexplorer-net-进行ast分析。"><a href="#_2-使用https-astexplorer-net-进行ast分析。" aria-hidden="true" class="header-anchor">#</a> 2. 使用https://astexplorer.net/ 进行AST分析。</h3> <p>如图所示：
<img src="https://img4.tuhu.org/PeccancyCheXingYi/Fi-8bDBlO2XddekCkb9NTbL1eXv3_w649_h800.jpeg@100Q.jpg" alt=""></p> <p>由于需要做的是 wx =&gt; swan, 因此要找到wx这个文法对应的表达式，这里找到的是 &quot;callee： MemberExpression&quot;， 然后修改plugin代码</p> <div class="language-vue extra-class"><pre class="language-vue"><code>const plugin = ({types: t}) =&gt; {
  return {
    visitor: {
      MemberExpression: {
        enter(path, state) {
          const node = path.node
          const object = node.object
          if (t.isMemberExpression(node) &amp;&amp; t.isIdentifier(object, {name: 'wx'})) {
            path.traverse({
              Identifier(path) {
                if (path.node.name === 'wx') {
                  path.node.name = 'swan'
                }
              }
            })
          }
        }
      }
    }
  }
}
</code></pre></div><p>其中 types 其实就是 babel.types这个库，在这里作为plugin会在回调的时候会把babel作为参数传入, 然后进行解构。
可使用 types 来生成一个AST节点，或者来做浅层判断
使用types.numericLiteral() 来生成一个数字类型的节点。
使用types.isNumericLiteral() 来判断当前节点的name值是否为数字。</p> <p>在visitor中，path就是指当前访问者访问的节点。该对象下有许多属性和方法，例如</p> <div class="language-vue extra-class"><pre class="language-vue"><code>── 属性      
  - node   当前节点
  - parent  父节点
  - parentPath 父path
  - scope   作用域
  - context  上下文
  - ...
── 方法
  - get   当前节点
  - findParent  向父节点搜寻节点
  - getSibling 获取兄弟节点
  - replaceWith  用AST节点替换该节点
  - replaceWithSourceString  用资源字符串来代替这个节点，会在内部自动生成一个节点
  - replaceWithMultiple 用多个AST节点替换该节点
  - insertBefore  在节点前插入节点
  - insertAfter 在节点后插入节点
  - remove   删除节点
  - ...
</code></pre></div><p>具体的可以查看babel-traverse</p> <h3 id="_3-执行插件"><a href="#_3-执行插件" aria-hidden="true" class="header-anchor">#</a> 3.执行插件</h3> <p>结果为:</p> <div class="language-vue extra-class"><pre class="language-vue"><code>function test() {
  swan.showModal({
    title: &quot;modal&quot;,
    content: 'content'
  });
}
</code></pre></div><p>具体代码：
<a href="https://github.com/SalterYu/MyBlog/blob/master/simple-bundler/babel-use/wx2swan.js">wx2swan.js</a> <a href="https://github.com/SalterYu/MyBlog/tree/master/simple-compiler">简易编译器</a></p> <h3 id="结尾"><a href="#结尾" aria-hidden="true" class="header-anchor">#</a> 结尾</h3> <p>分享几篇文章：</p> <ul><li><a href="https://juejin.im/post/5c21b584e51d4548ac6f6c99">Babel的深入了解</a></li> <li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-writing-your-first-babel-plugin">Babel插件手册</a></li></ul></div> <footer class="page-edit"><!----> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">4/12/2019, 8:43:40 AM</span></div></footer> <!----> </main></div><div class="global-ui"><!----><!----></div></div>
    <script src="/share/assets/js/app.35e8eb11.js" defer></script><script src="/share/assets/js/2.99d8ca2c.js" defer></script><script src="/share/assets/js/9.abdaf9be.js" defer></script><script src="/share/assets/js/3.0ba4e460.js" defer></script>
  </body>
</html>
