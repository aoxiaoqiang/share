<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>小程序优化</title>
    <meta name="description" content="">
    
    
    <link rel="preload" href="/share/assets/css/0.styles.18e0c493.css" as="style"><link rel="preload" href="/share/assets/js/app.5bb9b872.js" as="script"><link rel="preload" href="/share/assets/js/2.1669a297.js" as="script"><link rel="preload" href="/share/assets/js/8.0a84fb0f.js" as="script"><link rel="preload" href="/share/assets/js/3.575a718f.js" as="script"><link rel="prefetch" href="/share/assets/js/10.77367f05.js"><link rel="prefetch" href="/share/assets/js/11.0a8ec6e6.js"><link rel="prefetch" href="/share/assets/js/12.9226fa38.js"><link rel="prefetch" href="/share/assets/js/13.8646d975.js"><link rel="prefetch" href="/share/assets/js/4.464fa5b5.js"><link rel="prefetch" href="/share/assets/js/5.afc21057.js"><link rel="prefetch" href="/share/assets/js/6.0b889c3b.js"><link rel="prefetch" href="/share/assets/js/7.8541c6e9.js"><link rel="prefetch" href="/share/assets/js/9.413abfde.js">
    <link rel="stylesheet" href="/share/assets/css/0.styles.18e0c493.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container no-sidebar"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/share/" class="home-link router-link-active"></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <!----></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><!---->  <!----> </aside> <main class="page"> <div class="content default"><h1 id="小程序优化"><a href="#小程序优化" aria-hidden="true" class="header-anchor">#</a> 小程序优化</h1> <h2 id="前言"><a href="#前言" aria-hidden="true" class="header-anchor">#</a> 前言</h2> <p>在小程序官方文档中其实有一些<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html" target="_blank" rel="noopener noreferrer">优化建议<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>，我们时常需要看看，其中最主要的是<code>setData</code>的优化。</p> <h3 id="setdata"><a href="#setdata" aria-hidden="true" class="header-anchor">#</a> setData</h3> <p>由于微信小程序实现机制<code>setData</code>需要在视图层和逻辑层进行数据传输，这就有了性能瓶颈，所以我们需要做优化。</p> <h3 id="图片"><a href="#图片" aria-hidden="true" class="header-anchor">#</a> 图片</h3> <p>目前图片资源的主要性能问题在于大图片和长列表图片上，这两种情况都有可能导致 iOS 客户端内存占用上升，从而触发系统回收小程序页面。</p> <p>在 iOS 上，小程序的页面是由多个 WKWebView 组成的，在系统内存紧张时，会回收掉一部分 WKWebView。从过去我们分析的案例来看，大图片和长列表图片的使用会引起 WKWebView 的回收。</p> <p>除了内存问题外，大图片也会造成页面切换的卡顿。我们分析过的案例中，有一部分小程序会在页面中引用大图片，在页面后退切换中会出现掉帧卡顿的情况。</p> <p>当前我们建议开发者尽量减少使用大图片资源。</p> <h3 id="包大小"><a href="#包大小" aria-hidden="true" class="header-anchor">#</a> 包大小</h3> <p>小程序一开始时代码包限制为 1MB，但我们收到了很多反馈说代码包大小不够用，经过评估后我们放开了这个限制，增加到 2MB 。代码包上限的增加对于开发者来说，能够实现更丰富的功能，但对于用户来说，也增加了下载流量和本地空间的占用。</p> <p>开发者在实现业务逻辑同时也有必要尽量减少代码包的大小，因为代码包大小直接影响到下载速度，从而影响用户的首次打开体验。</p> <p>在日常开发的时候，我们可能引入了一些新的库文件，而过了一段时间后，由于各种原因又不再使用这个库了，我们常常会只是去掉了代码里的引用，而忘记删掉这类库文件了。目前小程序打包是会将工程下所有文件都打入代码包内，也就是说，这些没有被实际使用到的库文件和资源也会被打入到代码包里，从而影响到整体代码包的大小。</p> <h3 id="audits"><a href="#audits" aria-hidden="true" class="header-anchor">#</a> <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/audits.html" target="_blank" rel="noopener noreferrer">Audits<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></h3> <p>体验评分是一项给小程序的体验好坏打分的功能，它会在小程序运行过程中实时检查，分析出一些可能导致体验不好的地方，并且定位出哪里有问题，以及给出一些优化建议。</p> <h2 id="优化点"><a href="#优化点" aria-hidden="true" class="header-anchor">#</a> 优化点</h2> <p>基于以上，提出下列优化项：</p> <ul><li>避免频繁<code>setData</code></li> <li>避免传递大数据</li> <li>避免在后台进行<code>setData</code></li> <li>减小图片大小，按需引用图片</li> <li>减小包大小</li> <li>减少并发数</li></ul> <h2 id="如何优化"><a href="#如何优化" aria-hidden="true" class="header-anchor">#</a> 如何优化</h2> <p>基于以上点我们需要做的</p> <h3 id="如何避免频繁setdata"><a href="#如何避免频繁setdata" aria-hidden="true" class="header-anchor">#</a> 如何避免频繁<code>setData</code></h3> <p>在一个事件循环内，将批量的<code>setData</code>进行合并</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token comment">// 现状</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      a<span class="token punctuation">:</span> <span class="token string">'1'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// do something</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      b<span class="token punctuation">:</span> <span class="token string">'1'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 期望</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      a<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>
      b<span class="token punctuation">:</span> <span class="token string">'1'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>有些情况，可能会频繁触发事件导致会频繁<code>setData</code>,比如<code>onScroll</code>,<code>onTouchMove</code>等，我们应该怎么做呢？</p> <ul><li>使用节流函数</li> <li>使用<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/interactive-animation.html" target="_blank" rel="noopener noreferrer">wxs 响应事件<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></li></ul> <h3 id="如何避免传递大数据"><a href="#如何避免传递大数据" aria-hidden="true" class="header-anchor">#</a> 如何避免传递大数据</h3> <p>有以下几点</p> <ul><li><p>最小化更新
比如我们需要更新某一项</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      c<span class="token punctuation">:</span> <span class="token number">3</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 错误示例, 当数据小的时候没事</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>item<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 正确示例</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string">'item.a'</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其实我们日常开发中碰到大部分情况是长列表分页加载，如果我们每次都将获取新数据<code>concat</code>到长列表数据中再<code>setData</code>, 这样数据会越来越多导致数据超出或者慢等情况，那我们也可以以这种方式更新数据。</p> <div class="language-typescript extra-class"><pre class="language-typescript"><code><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> newdata <span class="token operator">=</span> <span class="token function">getMoreData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分页加载拿到的数据</span>
    <span class="token keyword">let</span> newList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 以下是示例用代码，不严谨</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> item <span class="token operator">=</span> newData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      newList<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`list[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>len <span class="token operator">+</span> i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></li> <li><p>优先更新-延迟更新
当我们可能一次性拿到比较大的数据时，我们可能会直接<code>setData</code>，就会造成性能问。</p> <p>我们可以优先更新可视区域内的数据，之后再更新可视区域外的区域，这样避免一次性设置过多数据导致慢、卡顿等问题。</p></li> <li><p>按需更新</p> <p><a href="https://github.com/wechat-miniprogram/recycle-view" target="_blank" rel="noopener noreferrer">recycle-view<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a> 是一个很好的例子，原理如下图（<a href="https://zhuanlan.zhihu.com/p/34585166" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/34585166<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>）</p> <p><img src="https://pic3.zhimg.com/80/v2-f00bb3f5d9815d660d7bcbd87236af86_hd.jpg" alt="img"></p> <p>只在可视区域内显示节点信息 ，其他的用占位替代，这样我们就可以到达按需更新的目的。在长列表或者瀑布流等需要展示很多数据并且有规律的场景下是<strong>很有用处的</strong>。</p></li></ul> <h3 id="图片优化"><a href="#图片优化" aria-hidden="true" class="header-anchor">#</a> <a href="https://www.yuque.com/ysfe/ykx/imgopt" target="_blank" rel="noopener noreferrer">图片优化<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a></h3> <ul><li><p>减少图片大小</p> <p>我们使用七牛 cdn，七牛提供了相对丰富的<a href="https://developer.qiniu.com/dora/manual/1279/basic-processing-images-imageview2" target="_blank" rel="noopener noreferrer">api<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" x="0px" y="0px" viewBox="0 0 100 100" width="15" height="15" class="icon outbound"><path fill="currentColor" d="M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"></path> <polygon fill="currentColor" points="45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"></polygon></svg></a>可以动态改变图片大小等功能</p> <p>like: http://odum9helk.qnssl.com/resource/gogopher.jpg?imageView2/1/w/200/h/200</p> <p><img src="https://user-images.githubusercontent.com/4362412/56707577-0a548f00-674c-11e9-8c16-461d31f54f90.png" alt="1556162364876"></p></li> <li><p>按需引用图片</p> <p>按照样式稿，基本能确定所需图片的宽高, 这样就能极大的减少图片大小。我们也有相应的<strong>方法</strong>得到处理过的图片地址。</p></li></ul> <h3 id="减少包大小"><a href="#减少包大小" aria-hidden="true" class="header-anchor">#</a> 减少包大小</h3> <ul><li>查找代码，分析出不需要的代码并删除</li> <li>通过<strong>audits</strong>分析，查找那些页面有 wxss 可能有优化空间</li> <li>等等</li></ul> <h3 id="减少并发"><a href="#减少并发" aria-hidden="true" class="header-anchor">#</a> 减少并发</h3> <p>在 audits 分析中，有两个比较突出的是多图片并发和多请求并发，这是优化重点及难点。</p> <ul><li><p>减少图片请求并发</p> <ul><li>使用<code>image</code>标签中得<code>lazy-load</code>属性，可以延迟加载图片</li></ul> <p><img src="https://user-images.githubusercontent.com/4362412/56708640-0c205180-6750-11e9-9591-ee5f706268d8.png" alt="image"></p> <p>但是是在上下三屏开始加载，这个阈值不能设置，可能需要我们自己实现一个满足需求。
当然我们可以考虑更好的解决方案。</p> <ul><li>尽可能使用<code>iconfont</code> 或 css实现一些图标， 而不是引入一张图片</li></ul></li> <li><p>减少请求并发数</p> <ul><li><p>根据实际情况优先请求首屏展示的内容，延后请求非首屏内容。</p></li> <li><p>查看是否有重复的请求，能否减少。</p></li> <li><p>使用<code>lazy-component</code></p> <p>当我们把页面拆分成多个组件展示时，每个组件独立请求的情况下，这个时候我们需要引入延迟加载组件<code>lazy-component</code>,效果和<code>image</code>组件的<code>lazy-load</code>类似，当组件在可视区域内时初始化，不在可视区域内则不初始化。</p></li></ul></li></ul></div> <footer class="page-edit"><!----> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">4/25/2019, 7:43:27 AM</span></div></footer> <!----> </main></div><div class="global-ui"><!----><!----></div></div>
    <script src="/share/assets/js/app.5bb9b872.js" defer></script><script src="/share/assets/js/2.1669a297.js" defer></script><script src="/share/assets/js/8.0a84fb0f.js" defer></script><script src="/share/assets/js/3.575a718f.js" defer></script>
  </body>
</html>
