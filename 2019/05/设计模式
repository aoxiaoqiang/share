<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>VuePress</title>
    <meta name="description" content="">
    
    
    <link rel="preload" href="/share/assets/css/0.styles.18e0c493.css" as="style"><link rel="preload" href="/share/assets/js/app.35e8eb11.js" as="script"><link rel="preload" href="/share/assets/js/2.99d8ca2c.js" as="script"><link rel="preload" href="/share/assets/js/10.2655e777.js" as="script"><link rel="preload" href="/share/assets/js/3.0ba4e460.js" as="script"><link rel="prefetch" href="/share/assets/js/11.1b5b21ec.js"><link rel="prefetch" href="/share/assets/js/12.4cfc540f.js"><link rel="prefetch" href="/share/assets/js/13.027d3509.js"><link rel="prefetch" href="/share/assets/js/4.7674a282.js"><link rel="prefetch" href="/share/assets/js/5.6b4b3fc2.js"><link rel="prefetch" href="/share/assets/js/6.eae75b47.js"><link rel="prefetch" href="/share/assets/js/7.4062c9e3.js"><link rel="prefetch" href="/share/assets/js/8.7eac1576.js"><link rel="prefetch" href="/share/assets/js/9.abdaf9be.js">
    <link rel="stylesheet" href="/share/assets/css/0.styles.18e0c493.css">
  </head>
  <body>
    <div id="app" data-server-rendered="true"><div class="theme-container no-sidebar"><header class="navbar"><div class="sidebar-button"><svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" viewBox="0 0 448 512" class="icon"><path fill="currentColor" d="M436 124H12c-6.627 0-12-5.373-12-12V80c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12zm0 160H12c-6.627 0-12-5.373-12-12v-32c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v32c0 6.627-5.373 12-12 12z"></path></svg></div> <a href="/share/" class="home-link router-link-active"></a> <div class="links"><div class="search-box"><input aria-label="Search" autocomplete="off" spellcheck="false" value=""> <!----></div> <!----></div></header> <div class="sidebar-mask"></div> <aside class="sidebar"><!---->  <!----> </aside> <main class="page"> <div class="content default"><p>JS 常用的设计模式以及应用场景</p> <h1 id="何谓设计模式"><a href="#何谓设计模式" aria-hidden="true" class="header-anchor">#</a> 何谓设计模式</h1> <p>没必要被高大上的名词所吓倒 🤔，日常 coding 中或许一个不了解各种设计模式的程序员可能自己其实已经用到了很多</p> <p>抛开官方的定义在我看来简单来说就是一个简单的思想被统一为规范，按照这个规范可以写出更优雅可控亦或性能更佳的代码，像是框架的单位</p> <p>定义：在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案</p> <p>补充：并非所有的软件模式都是设计模式，设计模式特指软件“设计”层次上的问题。还有其他非设计模式的模式，如架构模式。同时，算法不能算是一种设计模式，因为算法主要是用来解决计算上的问题，而非设计上的问题</p> <p>软件设计模式有很多，常规的有 23 种</p> <h1 id="设计原则"><a href="#设计原则" aria-hidden="true" class="header-anchor">#</a> 设计原则</h1> <p>在列举具体的设计模式之前，我们要先知道设计模式本身的规范是什么，这就是设计原则，主要以下三种：</p> <ul><li><p>单一职责原则（SRP）：一个对象或方法只做一件事情。如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。应该把对象或方法划分成较小的粒度</p></li> <li><p>最少知识原则（LKP）：一个软件实体应当 尽可能少地与其他实体发生相互作用，应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的 相互联系，可以转交给第三方进行处理</p></li> <li><p>开放-封闭原则（OCP）：软件实体（类、模块、函数）等应该是可以 扩展的，但是不可修改，当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，尽量避免改动程序的源代码，防止影响原系统的稳定</p></li></ul> <h1 id="从最简单的单体-单例模式开始"><a href="#从最简单的单体-单例模式开始" aria-hidden="true" class="header-anchor">#</a> 从最简单的单体/单例模式开始</h1> <h3 id="定义："><a href="#定义：" aria-hidden="true" class="header-anchor">#</a> 定义：</h3> <p>单体：一个用来划分命名空间并将一批相关的属性和方法组织在一起的对象</p> <p>单例：顾名仅可以可以被实例化一次：在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的一个类只有一个实例。即一个类只有一个对象实例
<em>在 java 中单例的定义：一个类有且仅有一个实例，并且自行实例化向整个系统提供</em></p> <h3 id="优点"><a href="#优点" aria-hidden="true" class="header-anchor">#</a> 优点:</h3> <ul><li>单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例</li> <li>因为类控制了实例化过程，所以类可以灵活更改实例化过程</li> <li>单体可以控制局部变量污染</li></ul> <h3 id="应用场景："><a href="#应用场景：" aria-hidden="true" class="header-anchor">#</a> 应用场景：</h3> <ul><li>可以用单例来划分命名空间: 一些对象我们往往只需要一个，如某些数据的缓存</li> <li>借助单例模式，可以把代码组织的更为一致</li></ul> <h4 id="最基本的单体模式"><a href="#最基本的单体模式" aria-hidden="true" class="header-anchor">#</a> 最基本的单体模式</h4> <p>直接导出一个方法属性集合的对象</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// commonjs 导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="用闭包来实现单例"><a href="#用闭包来实现单例" aria-hidden="true" class="header-anchor">#</a> 用闭包来实现单例</h4> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> Ins1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 利用闭包特性保证实例私有化</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> opt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      instance<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> opt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>测试：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ins1</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;i1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ins1</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">&quot;i2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i1 <span class="token operator">===</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i2</span>
</code></pre></div><h4 id="es6-实现单列"><a href="#es6-实现单列" aria-hidden="true" class="header-anchor">#</a> es6 实现单列</h4> <div class="language- extra-class"><pre class="language-text"><code>class Ins2 {
  constructor(name) {
    if (!Ins2.instance) {
      this.name = name
      Ins2.instance = this;
    }
    return Ins2.instance
  }
}

const a1 = new Ins2('jack')
const a2 = new Ins2('rous')
console.log(a1 === a2)
</code></pre></div><h3 id=""><a href="#" aria-hidden="true" class="header-anchor">#</a></h3> <p>补充：在 node 中一个文件就是一个独立模块，若在某个 js 文件中导出一个类： <code>class T {} export default new T</code> 之后在其他任何外部文件多次引入其实都是保证了 T 类只被实例化了一次而不会被多次初始化。这是因为 node 遵循了 commonjs 的规范，所有文件模块在被引用时都会先去模块系统的缓存中查看这个文件是否存在，如果存在就返回缓存否则才会重新创建一个模块，而这个缓存其实也就限制了模块内脚本的多次初始化</p> <h1 id="策略模式"><a href="#策略模式" aria-hidden="true" class="header-anchor">#</a> 策略模式</h1> <h3 id="定"><a href="#定" aria-hidden="true" class="header-anchor">#</a> 定</h3> <ul><li>减少<code>command c &amp; command v</code>, 提高复用性</li> <li>遵循开闭原则，算法独立易于切换、理解、拓展</li></ul> <h3 id="应用场景：-2"><a href="#应用场景：-2" aria-hidden="true" class="header-anchor">#</a> 应用场景：</h3> <p>针对代码多种行为设置大量的条件判断时将每一个行为划分为多个独立的对象。每一个对象被称为一个策略。设置多个这种策略对象，可以改进我们的代码质量，也更好的进行单元测试</p> <h4 id="最简单的执行"><a href="#最简单的执行" aria-hidden="true" class="header-anchor">#</a> 最简单的执行</h4> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义</span>
  <span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">{</span>
    plus10<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arg <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    plus100<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> arg <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 执行</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>plus<span class="token punctuation">,</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>plus<span class="token punctuation">]</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> strategy <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">strategy</span><span class="token punctuation">(</span><span class="token string">&quot;plus10&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">strategy</span><span class="token punctuation">(</span><span class="token string">&quot;plus100&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 101</span>
</code></pre></div><h4 id="对比分析"><a href="#对比分析" aria-hidden="true" class="header-anchor">#</a> 对比分析</h4> <p>eg.: 代码情景为超市促销，vip 为 5 折，老客户 3 折，普通顾客没折，计算最后需要支付的金额</p> <p>意大利逻辑:</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">context</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;vip&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;vip&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果 type 类型非常多，内部逻辑分别也不只是简单的 return 一个 val，那对后续的维护和测试就是灾难，下面拆分逻辑为独立单元:</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Vip</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">*</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Old</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">*</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Others</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">getPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setPrice</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> strategy<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;元&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>测试：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> seller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> vip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> old <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Old</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> other <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> vip<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token string">&quot;ww&quot;</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output:</span>
<span class="token comment">// zs 500 元</span>
<span class="token comment">// ls 800 元</span>
<span class="token comment">// ww 1000 元</span>
</code></pre></div><p>显然逻辑多而复杂时可以极大提高代码可读性以及减少维护成本</p> <p>补充：上述不断重复的代码片段看起来非常丑陋，其实可以通过继承来实现更简洁的写法：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 定义父类</span>
<span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>discount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不传为原价</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">=</span> discount <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">getPrice</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> price <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>discount <span class="token operator">*</span> price<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 声明子类</span>
<span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 可以自定义更多不同级别顾客不同需求</span>
<span class="token comment">// class Test extend Handler {</span>
<span class="token comment">//   getGifts() {</span>
<span class="token comment">//     if (this.discount &lt; 1) {</span>
<span class="token comment">//       // 赠送赠品</span>
<span class="token comment">//     }</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span>
<span class="token comment">// const master = new Test(0.1)</span>
<span class="token comment">// master.getGifts()</span>

<span class="token comment">// Context类同上方便统一接口输出</span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><p>测试：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> seller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> vip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> old <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> other <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

seller<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> vip<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token string">&quot;ww&quot;</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
seller<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// output:</span>
<span class="token comment">// zs 500 元</span>
<span class="token comment">// ls 800 元</span>
<span class="token comment">// ww 1000 元</span>
</code></pre></div><p>测试结果一致</p> <h1 id="代理模式"><a href="#代理模式" aria-hidden="true" class="header-anchor">#</a> 代理模式</h1> <h3 id="定义：-2"><a href="#定义：-2" aria-hidden="true" class="header-anchor">#</a> 定义：</h3> <p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用
著名的代理模式例子为引用计数（reference counting）指针对象
另外代理模式还可分为：</p> <ul><li>虚拟代理：把一些开销很大的对象，延迟到真正需要它的时候才去创建，当对象在创建前或创建中时，由虚拟代理来扮演对象的替身；对象创建后，代理就会将请求直接委托给对象</li> <li>保护代理：用于控制不同权限的对象对目标对象的访问</li> <li>缓存代理: 缓存代理可以作为一些开销大的运算结果提供暂时的存储，下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果</li></ul> <h3 id="优点："><a href="#优点：" aria-hidden="true" class="header-anchor">#</a> 优点：</h3> <p>独立职责归属，便于维护测试</p> <h3 id="应用场景：-3"><a href="#应用场景：-3" aria-hidden="true" class="header-anchor">#</a> 应用场景：</h3> <p>比如图片的懒加载，数据缓存等</p> <h4 id="虚拟代理实现图片懒加载"><a href="#虚拟代理实现图片懒加载" aria-hidden="true" class="header-anchor">#</a> 虚拟代理实现图片懒加载</h4> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> imgSet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> proxyImg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> _img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  _img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>imgSet<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">imgSet</span><span class="token punctuation">(</span><span class="token string">&quot;https://yphoto.eryufm.cn/upload/assets/jump.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    _img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// call</span>
<span class="token function">proxyImg</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token string">`https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1551174639&amp;di=90b4757f68c9480f78c132c930c1df10&amp;src=http://desk.fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/02/ChMkJ1bKxkmIObywAArTTfACinwAALHjACDZuIACtNl408.jpg`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="保护代理"><a href="#保护代理" aria-hidden="true" class="header-anchor">#</a> 保护代理</h4> <p>对象 a 需要给对象 c 发送信息，为了保证 a 对 c 是不可见，可用对象 b 代理转发</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// filter some no use or unneed requestions or data</span>
<span class="token comment">// A  ---&gt; B(proxy) ----&gt; C</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
  <span class="token function">send</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
  <span class="token function">receive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;c receive &quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">,</span> <span class="token string">&quot; from &quot;</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
  <span class="token function">receive</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      c<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">&quot;good morning&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">&quot;send again&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// output:</span>
<span class="token comment">// c receive good morning from b</span>
<span class="token comment">// c receive send again from b</span>
</code></pre></div><p>上面表示一个最简单的保护代理</p> <h4 id="缓存代理"><a href="#缓存代理" aria-hidden="true" class="header-anchor">#</a> 缓存代理</h4> <p>顾名思义就是缓存相关的代理</p> <p>有一个二级别联动的标签列表，第二级的各有自己所属的多个标签根据第一级的参数来发送指定请求来获取，如果想要达到点击第一级列表迅速展示出相关的第二级标签，我们可以在系统空闲时预先将所有标签全部获取并缓存</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 存储所有标签</span>
<span class="token keyword">let</span> tags<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">sendApiGetTags</span> <span class="token operator">=</span> index <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ajax.get('/api', { index })</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> proxyCache <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> allTagsCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    all<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
      <span class="token function">sendApiGetTags</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>params<span class="token punctuation">,</span>
        index
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>

  list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>allTagsCache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> allTagsCache<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> setTags <span class="token operator">=</span> <span class="token keyword">async</span> index <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 缓存中有直接拿</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyCache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tags <span class="token operator">=</span> proxyCache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缓存中没有则重发请求</span>
    tags <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendApiGetTags</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h1 id="发布订阅模式"><a href="#发布订阅模式" aria-hidden="true" class="header-anchor">#</a> 发布订阅模式</h1> <h3 id="定义：-3"><a href="#定义：-3" aria-hidden="true" class="header-anchor">#</a> 定义：</h3> <p>一种一对多的依赖关系，让多个订阅者对象同时监听某一个主题对象。这个主题对象在自身状态变化时，会通知所有订阅者对象，使它们能够自动更新自己的状态。
至于发布订阅模式和观察者模式是不是同一样东西不同的人各有看法</p> <h3 id="优点：-2"><a href="#优点：-2" aria-hidden="true" class="header-anchor">#</a> 优点：</h3> <p>订阅者可以根据自己需求当某种 Action 被触发时完成自己的调度</p> <h3 id="应用场景：-4"><a href="#应用场景：-4" aria-hidden="true" class="header-anchor">#</a> 应用场景：</h3> <p>AngularJs 的广播、vue 的 eventbus 等</p> <h4 id="根据主体构建发布订阅的基类"><a href="#根据主体构建发布订阅的基类" aria-hidden="true" class="header-anchor">#</a> 根据主体构建发布订阅的基类</h4> <p>构造发布者基类</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 订阅发布者的队列 存储每个订阅者</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">deliver</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 发布消息 调用订阅者的回调 告知订阅者</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=&gt;</span> fn<span class="token punctuation">.</span><span class="token function">shot</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>构造订阅者基类</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 传入订阅回调</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>shot <span class="token operator">=</span> call<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">subscribe</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>publisher<span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>shot <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shot<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;订阅该消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 判断当前订阅者是否订阅</span>
      publisher<span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">unsubscribe</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 移除当前订阅者</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;取消订阅&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    publisher<span class="token punctuation">.</span>subscribers <span class="token operator">=</span> publisher<span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>
      v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span>shot <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>shot
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>测试：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> pub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pub2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>deliver <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deliver<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

obs<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>pub<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅该消息</span>
obs<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>pub2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅该消息</span>

pub<span class="token punctuation">.</span><span class="token function">deliver</span><span class="token punctuation">(</span><span class="token string">&quot;pub deliver first message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pub deliver first message</span>
pub2<span class="token punctuation">.</span><span class="token function">deliver</span><span class="token punctuation">(</span><span class="token string">&quot;pub2 deliver first message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pub2 deliver first message</span>

obs<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span>pub<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消订阅</span>
pub<span class="token punctuation">.</span><span class="token function">deliver</span><span class="token punctuation">(</span><span class="token string">&quot;pub deliver second message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//</span>
</code></pre></div><h1 id="装饰者模式"><a href="#装饰者模式" aria-hidden="true" class="header-anchor">#</a> 装饰者模式</h1> <h3 id="定义：-4"><a href="#定义：-4" aria-hidden="true" class="header-anchor">#</a> 定义：</h3> <p>装饰模式指的是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能</p> <h3 id="优点：-3"><a href="#优点：-3" aria-hidden="true" class="header-anchor">#</a> 优点：</h3> <ul><li>装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互</li> <li>装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展</li></ul> <h3 id="应用场景：-5"><a href="#应用场景：-5" aria-hidden="true" class="header-anchor">#</a> 应用场景：</h3> <ul><li>需要扩展一个类的功能，或给一个类添加附加职责</li> <li>需要动态的给一个对象添加功能，这些功能可以再动态的撤销</li> <li>不必改动原本的逻辑造成不可知问题</li></ul> <h4 id="给所有的函数调用添加调用前和调用后的钩子"><a href="#给所有的函数调用添加调用前和调用后的钩子" aria-hidden="true" class="header-anchor">#</a> 给所有的函数调用添加调用前和调用后的钩子</h4> <p>普通函数：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">&quot; right now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&quot;let go&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lets go right now</span>
</code></pre></div><p>我们知道 JS 中所有的函数都是基于父类 <code>Function</code> 生成的，所以会继承父类原型的方法，下面我们将函数的钩子挂在父类的原型上即可：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 执行前</span>
Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回体本身也是函数所以支持继续调用钩子</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用钩子，同时参数传递到钩子内</span>
    call<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用自身</span>
    <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 执行后</span>
<span class="token comment">// 和 before 同理</span>
Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

    call<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 返回自身的返回值</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>测试：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token comment">// 重新包装 fn</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">&quot; right now&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> decoratorFn <span class="token operator">=</span> fn
  <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;when we go,&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;had to go&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">decoratorFn</span><span class="token punctuation">(</span><span class="token string">&quot;lets go&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// out put:</span>
<span class="token comment">// when we go, right now</span>
<span class="token comment">// lets go, right now</span>
<span class="token comment">// had to go, right now</span>
</code></pre></div><h1 id="职责链（责任链）模式"><a href="#职责链（责任链）模式" aria-hidden="true" class="header-anchor">#</a> 职责链（责任链）模式</h1> <h3 id="定义：-5"><a href="#定义：-5" aria-hidden="true" class="header-anchor">#</a> 定义：</h3> <p>它是一种链式结构，每个节点都有可能两种操作，要么处理该请求停止该请求操作，要么把请求转发到下一个节点，让下一个节点来处理请求</p> <h3 id="优点：-4"><a href="#优点：-4" aria-hidden="true" class="header-anchor">#</a> 优点：</h3> <p>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了</p> <h3 id="应用场景：-6"><a href="#应用场景：-6" aria-hidden="true" class="header-anchor">#</a> 应用场景：</h3> <p>JS 中的事件冒泡（事件委托）就是经典案例</p> <h4 id="实例分析"><a href="#实例分析" aria-hidden="true" class="header-anchor">#</a> 实例分析</h4> <p>部门采购物品不同金额需要走不同职位的流程审批，采购部经理可自主决定 1w 以内的采购，总经理可以决定 10w 以内的采购，董事长决定 100w 以内的采购
下面分别抽象处理者构造基类</p> <p>责任链调度中心：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setNext</span><span class="token punctuation">(</span>_handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> _handler<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>采购部经理：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">CGBHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1w</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;1w以内，同意 🙆‍&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;金额太大，只能处理1w以内的采购 😢&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>总经理：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">ZJLHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 10w</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;10w以内，同意 🙆‍&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;金额太大，只能处理10w以内的采购 😢&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>董事长：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">DSZHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>
  <span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 100w</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>money <span class="token operator">&gt;=</span> <span class="token number">100000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;10万以上的我来处理 🙋&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//处理其他逻辑</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>封装客户端接口：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> cgb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CGBHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> zjl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZJLHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> dsz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DSZHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  cgb<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>zjl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  zjl<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>dsz<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> cgb<span class="token punctuation">.</span>handleRequest<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>cgb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>测试：</p> <div class="language-js extra-class"><pre class="language-js"><code><span class="token function">dispath</span><span class="token punctuation">(</span><span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output:</span>
<span class="token comment">// 金额太大，只能处理1w以内的采购</span>
<span class="token comment">// 金额太大，只能处理10w以内的采购</span>
<span class="token comment">// 10万以上的我来处理</span>

<span class="token function">dispath</span><span class="token punctuation">(</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output:</span>
<span class="token comment">// 1w以内，同意</span>
</code></pre></div><p>补充：</p> <ul><li><p>纯的责任链：要求请求在这些对象链中必须被处理，而且一个节点处理对象，要么只处理请求，要么把请求转发给下个节点对象处理</p></li> <li><p>不纯的责任链：要求在责任链里不一定会有处理结构，而且一个节点对象，即可以处理部分请求，并把请求再转发下个节点处理</p></li></ul></div> <footer class="page-edit"><!----> <div class="last-updated"><span class="prefix">Last Updated: </span> <span class="time">5/13/2019, 2:34:26 AM</span></div></footer> <!----> </main></div><div class="global-ui"><!----><!----></div></div>
    <script src="/share/assets/js/app.35e8eb11.js" defer></script><script src="/share/assets/js/2.99d8ca2c.js" defer></script><script src="/share/assets/js/10.2655e777.js" defer></script><script src="/share/assets/js/3.0ba4e460.js" defer></script>
  </body>
</html>
