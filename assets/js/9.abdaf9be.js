(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{323:function(e,t,a){"use strict";a.r(t);var n=a(11),r=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://astexplorer.net/"}},[e._v("AST Explore，可视化工具")])]),e._v(" "),a("p",[e._v("现如今，许多各式各样的框架诞生，特别是多端生成的解决方案，例如：taro，Chameleon（卡梅隆），小程序框架: mpvue，wepy。\n又或者在其他场景，如：")]),e._v(" "),a("ol",[a("li",[e._v("eslint对代码错误或风格的检查，发现一些潜在的错误")]),e._v(" "),a("li",[e._v("IDE的错误提示、格式化、高亮、自动补全等.")]),e._v(" "),a("li",[e._v("UglifyJS压缩代码.")]),e._v(" "),a("li",[e._v("代码打包工具webpack。")])]),e._v(" "),a("p",[e._v("万变不离其宗，都是站在AST这个巨人的肩膀上。\n且对于体力型的，或者重复性的工作，能用工具化，流程化解决就用他们解决。")]),e._v(" "),a("p",[e._v("在了解编译器之前，了解一下babel的编译过程。"),a("a",{attrs:{href:"https://yq.aliyun.com/articles/62671"}},[e._v("(来源)")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/24/167dfa8949b0401a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"来源"}})]),e._v(" "),a("h2",{attrs:{id:"什么是编译器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是编译器","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是编译器")]),e._v(" "),a("p",[e._v("编译器：能够把一种语言等价得转换为另一种目标语言。从现代高级编译器的角度讲，源语言是高级程序设计语言，\n容易阅读与编写，而目标语言是机器语言，即二进制代码，能够被计算机直接识别。\n语言系统的处理角度来看，由源程序生成可执行程序的整体工作流程如下所示。")]),e._v(" "),a("p",[e._v("源程序 -> 预处理器 -> 编译器 -> 目标程序 -> .... -> 可执行程序")]),e._v(" "),a("p",[e._v("编译器又分为前端和后端。前端包括词法分析、语法分析、语义分析、中间代码生成，具有机器无关性，比较有代表性的工具是 Flex、Bison。\n后端包括中间代码优化、目标代码生成，具有机器相关性，比较有代表性的工具是 LLVM。")]),e._v(" "),a("p",[e._v("具体编译原理，查看这篇文章 "),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/31096468"}},[e._v("前端为什么要学习编译原理")])]),e._v(" "),a("h2",{attrs:{id:"编译器的编译过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译器的编译过程","aria-hidden":"true"}},[e._v("#")]),e._v(" 编译器的编译过程")]),e._v(" "),a("h3",{attrs:{id:"_1-词法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-词法分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.词法分析")]),e._v(" "),a("p",[e._v("获取原始代码，称为文法，scan，进行分析，转换为词法单元。token是一个不可再分割的最小单元，每个不可分割的最小单元\n都有能被唯一识别的类型和其他附加属性，并通过一个标记器将其拆分为这些命名标记的东西。最终生成一个tokens。\n对于token的验证，可以用正则表达式，一个一个进行扫描匹配，指针不断往后移直至不满足匹配规则或达到末尾。\n这个过程会过滤换行符和空格等等\n例如：")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("   const input = '(add 2 (subtract 4 \"abc\"))'\n// 转换为\n   const tokens = [ { type: 'paren', value: '(' },\n     { type: 'name', value: 'add' },\n     { type: 'number', value: '2' },\n     { type: 'paren', value: '(' },\n     { type: 'name', value: 'subtract' },\n     { type: 'number', value: '4' },\n     { type: 'number', value: '2' },\n     { type: 'paren', value: ')' },\n     { type: 'paren', value: ')' } ]\n")])])]),a("h3",{attrs:{id:"_2-语法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.语法分析")]),e._v(" "),a("p",[e._v('根据token的标记，逐个读入token，使用深度优先遍历并将其重新格式化为描述语法各个部分及其相互关系的表示形式，称为AST。\n遇到起始符号，如"<", "(", "{" 等，嵌套递归，直到遇到终结符号，退出遍历。\n这是一个深度嵌套的对象，以一种即方便使用又能提供大量信息的方式来表示的代码。\n例如:')]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("const ast = {\n  type: 'Program',\n  body: [{\n    type: 'CallExpression',\n    name: 'add',\n    params: [{\n      type: 'NumberLiteral',\n      value: '2'\n    }, {\n      type: 'CallExpression',\n      name: 'subtract',\n      params: [{\n        type: 'NumberLiteral',\n        value: '4'\n      }, {\n        type: 'NumberLiteral',\n        value: '2'\n      }]\n    }]\n  }]\n}\n")])])]),a("h3",{attrs:{id:"_3-语义分析（转换）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-语义分析（转换）","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.语义分析（转换）")]),e._v(" "),a("p",[e._v("这个阶段是编译器对上一个AST进行转换，它可以用一种语言操作AST, 也可以翻译成全新的语言。在这个过程中，\n我们可以通过 添加/删除/替换属性来操作节点。并基于它创造一个新的AST。例如可以把wx全转为swan等等，或者\n在原先的代码基础上添加目标结果的一些特性。\n完成上述功能，必须通过递归进行遍历每一层。由于仅仅只需要访问每一个节点就足够了，因此利用visitor就可以解决这个问题。\n当遇到匹配类型的节点时，我们只需要调用对应visitor中的方法就可以解决问题。\nvisitor的方法可能如下：")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("var visitor = {\n  NumberLiteral(node, parent) {},\n  CallExpression(node, parent) {},\n  ...\n};\n")])])]),a("p",[e._v("但如果需要在离开当前节点的时候做一些操作呢？\n我们可以更新下visitor方法，如下所示:")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("const visitor = {\n    NumberLiteral: {\n      enter(node, parent) {\n        parent._context.push({\n          type: 'NumberLiteral',\n          value: node.value\n        })\n      },\n      exit(node, parent) {\n         // do something\n      }\n    },\n    StringLiteral: {\n      enter(node, parent) {\n        parent._context.push({\n          type: 'StringLiteral',\n          value: node.value\n        })\n      }\n    },\n    ...\n  }\n")])])]),a("p",[e._v("有了visitor对象，就可以在traverseNode（转换节点）的过程中, 对特定的节点进行转换操作，并做一些其他事情。\n具体流程如下：")]),e._v(" "),a("ul",[a("li",[e._v("→ Program (enter)\n"),a("ul",[a("li",[e._v("→ CallExpression (enter)\n"),a("ul",[a("li",[e._v("→ NumberLiteral (enter)")]),e._v(" "),a("li",[e._v("← NumberLiteral (exit)")]),e._v(" "),a("li",[e._v("→ CallExpression (enter)\n"),a("ul",[a("li",[e._v("→ NumberLiteral (enter)")]),e._v(" "),a("li",[e._v("← NumberLiteral (exit)")]),e._v(" "),a("li",[e._v("→ NumberLiteral (enter)")]),e._v(" "),a("li",[e._v("← NumberLiteral (exit)")])])]),e._v(" "),a("li",[e._v("← CallExpression (exit)")])])]),e._v(" "),a("li",[e._v("← CallExpression (exit)")])])]),e._v(" "),a("li",[e._v("← Program (exit)")])]),e._v(" "),a("h3",{attrs:{id:"_4-代码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-代码生成","aria-hidden":"true"}},[e._v("#")]),e._v(" 4. 代码生成")]),e._v(" "),a("p",[e._v("代码生成器应当知道如何打印AST的所有不同类型的节点，并且递归调用来打印嵌套节点，直到生成最终代码。")]),e._v(" "),a("h2",{attrs:{id:"制作一个babel插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#制作一个babel插件","aria-hidden":"true"}},[e._v("#")]),e._v(" 制作一个babel插件")]),e._v(" "),a("p",[e._v("由于小程序开发比较多，有接触百度小程序和微信小程序等等，肯定会面临一个转换的问题，如 wx => swan 等。\n这里就尝试做一个类似的插件。")]),e._v(" "),a("h3",{attrs:{id:"_1-创建基础结构（插件的基础）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建基础结构（插件的基础）","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. 创建基础结构（插件的基础）")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("const babel = require('babel-core');\n\n// 输入的文法\nconst input = `\nfunction test() {\n  wx.showModal({\n    title: \"modal\",\n    content: 'content'\n  })\n}\n`\n\n// 需要做的插件功能\nconst plugin = ({types: t}) => {\n  return {\n    visitor: {\n    }\n  }\n}\n\n// 利用插件\nconst res = babel.transform(input, {\n  plugins: [plugin]\n})\n\nconsole.log(res.code)\n")])])]),a("h3",{attrs:{id:"_2-使用https-astexplorer-net-进行ast分析。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用https-astexplorer-net-进行ast分析。","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. 使用https://astexplorer.net/ 进行AST分析。")]),e._v(" "),a("p",[e._v("如图所示：\n"),a("img",{attrs:{src:"https://img4.tuhu.org/PeccancyCheXingYi/Fi-8bDBlO2XddekCkb9NTbL1eXv3_w649_h800.jpeg@100Q.jpg",alt:""}})]),e._v(" "),a("p",[e._v('由于需要做的是 wx => swan, 因此要找到wx这个文法对应的表达式，这里找到的是 "callee： MemberExpression"， 然后修改plugin代码')]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("const plugin = ({types: t}) => {\n  return {\n    visitor: {\n      MemberExpression: {\n        enter(path, state) {\n          const node = path.node\n          const object = node.object\n          if (t.isMemberExpression(node) && t.isIdentifier(object, {name: 'wx'})) {\n            path.traverse({\n              Identifier(path) {\n                if (path.node.name === 'wx') {\n                  path.node.name = 'swan'\n                }\n              }\n            })\n          }\n        }\n      }\n    }\n  }\n}\n")])])]),a("p",[e._v("其中 types 其实就是 babel.types这个库，在这里作为plugin会在回调的时候会把babel作为参数传入, 然后进行解构。\n可使用 types 来生成一个AST节点，或者来做浅层判断\n使用types.numericLiteral() 来生成一个数字类型的节点。\n使用types.isNumericLiteral() 来判断当前节点的name值是否为数字。")]),e._v(" "),a("p",[e._v("在visitor中，path就是指当前访问者访问的节点。该对象下有许多属性和方法，例如")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("── 属性      \n  - node   当前节点\n  - parent  父节点\n  - parentPath 父path\n  - scope   作用域\n  - context  上下文\n  - ...\n── 方法\n  - get   当前节点\n  - findParent  向父节点搜寻节点\n  - getSibling 获取兄弟节点\n  - replaceWith  用AST节点替换该节点\n  - replaceWithSourceString  用资源字符串来代替这个节点，会在内部自动生成一个节点\n  - replaceWithMultiple 用多个AST节点替换该节点\n  - insertBefore  在节点前插入节点\n  - insertAfter 在节点后插入节点\n  - remove   删除节点\n  - ...\n")])])]),a("p",[e._v("具体的可以查看babel-traverse")]),e._v(" "),a("h3",{attrs:{id:"_3-执行插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行插件","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.执行插件")]),e._v(" "),a("p",[e._v("结果为:")]),e._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[e._v("function test() {\n  swan.showModal({\n    title: \"modal\",\n    content: 'content'\n  });\n}\n")])])]),a("p",[e._v("具体代码：\n"),a("a",{attrs:{href:"https://github.com/SalterYu/MyBlog/blob/master/simple-bundler/babel-use/wx2swan.js"}},[e._v("wx2swan.js")]),e._v(" "),a("a",{attrs:{href:"https://github.com/SalterYu/MyBlog/tree/master/simple-compiler"}},[e._v("简易编译器")])]),e._v(" "),a("h3",{attrs:{id:"结尾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结尾","aria-hidden":"true"}},[e._v("#")]),e._v(" 结尾")]),e._v(" "),a("p",[e._v("分享几篇文章：")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/5c21b584e51d4548ac6f6c99"}},[e._v("Babel的深入了解")])]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-writing-your-first-babel-plugin"}},[e._v("Babel插件手册")])])])])},[],!1,null,null,null);t.default=r.exports}}]);